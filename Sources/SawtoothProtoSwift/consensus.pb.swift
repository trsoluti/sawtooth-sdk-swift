// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: consensus.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct ConsensusPeerMessageHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Public key for the component internal to the validator that
  /// signed the message
  public var signerID: Data = SwiftProtobuf.Internal.emptyData

  /// The sha512 hash of the encoded message
  public var contentSha512: Data = SwiftProtobuf.Internal.emptyData

  /// Interpretation is left to the consensus engine implementation
  public var messageType: String = String()

  /// Used to identify the consensus engine that produced this message
  public var name: String = String()

  public var version: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A consensus-related message sent between peers
public struct ConsensusPeerMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The serialized version of the ConsensusPeerMessageHeader
  public var header: Data = SwiftProtobuf.Internal.emptyData

  /// The signature derived from signing the header
  public var headerSignature: Data = SwiftProtobuf.Internal.emptyData

  /// The opaque payload to send to other nodes
  public var content: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// All information about a block that is relevant to consensus
public struct ConsensusBlock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockID: Data = SwiftProtobuf.Internal.emptyData

  public var previousID: Data = SwiftProtobuf.Internal.emptyData

  /// The id of peer that signed this block
  public var signerID: Data = SwiftProtobuf.Internal.emptyData

  public var blockNum: UInt64 = 0

  public var payload: Data = SwiftProtobuf.Internal.emptyData

  /// A summary of the contents of the block
  public var summary: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Information about a peer that is relevant to consensus
public struct ConsensusPeerInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique id for this peer. This can be correlated with the signer id
  /// on consensus blocks.
  public var peerID: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A settings key-value pair
public struct ConsensusSettingsEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var key: String = String()

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A state key-value pair
public struct ConsensusStateEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var address: String = String()

  public var data: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Sent to connect with the validator
public struct ConsensusRegisterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of this consensus engine
  public var name: String = String()

  /// The version of this consensus engine
  public var version: String = String()

  /// Any additional name/version pairs the consensus engine supports
  public var additionalProtocols: [ConsensusRegisterRequest.ProtocolMessage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct ProtocolMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var name: String = String()

    public var version: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct ConsensusRegisterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ConsensusRegisterResponse.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// Startup Info
  public var chainHead: ConsensusBlock {
    get {return _storage._chainHead ?? ConsensusBlock()}
    set {_uniqueStorage()._chainHead = newValue}
  }
  /// Returns true if `chainHead` has been explicitly set.
  public var hasChainHead: Bool {return _storage._chainHead != nil}
  /// Clears the value of `chainHead`. Subsequent reads from it will return its default value.
  public mutating func clearChainHead() {_uniqueStorage()._chainHead = nil}

  public var peers: [ConsensusPeerInfo] {
    get {return _storage._peers}
    set {_uniqueStorage()._peers = newValue}
  }

  public var localPeerInfo: ConsensusPeerInfo {
    get {return _storage._localPeerInfo ?? ConsensusPeerInfo()}
    set {_uniqueStorage()._localPeerInfo = newValue}
  }
  /// Returns true if `localPeerInfo` has been explicitly set.
  public var hasLocalPeerInfo: Bool {return _storage._localPeerInfo != nil}
  /// Clears the value of `localPeerInfo`. Subsequent reads from it will return its default value.
  public mutating func clearLocalPeerInfo() {_uniqueStorage()._localPeerInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case badRequest // = 2
    case serviceError // = 3
    case notReady // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .badRequest
      case 3: self = .serviceError
      case 4: self = .notReady
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .badRequest: return 2
      case .serviceError: return 3
      case .notReady: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension ConsensusRegisterResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ConsensusRegisterResponse.Status] = [
    .unset,
    .ok,
    .badRequest,
    .serviceError,
    .notReady,
  ]
}

#endif  // swift(>=4.2)

/// A new peer was added
public struct ConsensusNotifyPeerConnected {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var peerInfo: ConsensusPeerInfo {
    get {return _storage._peerInfo ?? ConsensusPeerInfo()}
    set {_uniqueStorage()._peerInfo = newValue}
  }
  /// Returns true if `peerInfo` has been explicitly set.
  public var hasPeerInfo: Bool {return _storage._peerInfo != nil}
  /// Clears the value of `peerInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPeerInfo() {_uniqueStorage()._peerInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// An existing peer was dropped
public struct ConsensusNotifyPeerDisconnected {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var peerID: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A new message was received from a peer
public struct ConsensusNotifyPeerMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The message sent
  public var message: ConsensusPeerMessage {
    get {return _storage._message ?? ConsensusPeerMessage()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {_uniqueStorage()._message = nil}

  /// The node that sent the message, not necessarily the node that created it
  public var senderID: Data {
    get {return _storage._senderID}
    set {_uniqueStorage()._senderID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// A new block was received and passed initial consensus validation
public struct ConsensusNotifyBlockNew {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var block: ConsensusBlock {
    get {return _storage._block ?? ConsensusBlock()}
    set {_uniqueStorage()._block = newValue}
  }
  /// Returns true if `block` has been explicitly set.
  public var hasBlock: Bool {return _storage._block != nil}
  /// Clears the value of `block`. Subsequent reads from it will return its default value.
  public mutating func clearBlock() {_uniqueStorage()._block = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// This block can be committed successfully
public struct ConsensusNotifyBlockValid {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockID: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// This block cannot be committed successfully
public struct ConsensusNotifyBlockInvalid {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockID: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// This block has been committed
public struct ConsensusNotifyBlockCommit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockID: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The engine has been activated
public struct ConsensusNotifyEngineActivated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Startup Info
  public var chainHead: ConsensusBlock {
    get {return _storage._chainHead ?? ConsensusBlock()}
    set {_uniqueStorage()._chainHead = newValue}
  }
  /// Returns true if `chainHead` has been explicitly set.
  public var hasChainHead: Bool {return _storage._chainHead != nil}
  /// Clears the value of `chainHead`. Subsequent reads from it will return its default value.
  public mutating func clearChainHead() {_uniqueStorage()._chainHead = nil}

  public var peers: [ConsensusPeerInfo] {
    get {return _storage._peers}
    set {_uniqueStorage()._peers = newValue}
  }

  public var localPeerInfo: ConsensusPeerInfo {
    get {return _storage._localPeerInfo ?? ConsensusPeerInfo()}
    set {_uniqueStorage()._localPeerInfo = newValue}
  }
  /// Returns true if `localPeerInfo` has been explicitly set.
  public var hasLocalPeerInfo: Bool {return _storage._localPeerInfo != nil}
  /// Clears the value of `localPeerInfo`. Subsequent reads from it will return its default value.
  public mutating func clearLocalPeerInfo() {_uniqueStorage()._localPeerInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// The engine has been deactivated
public struct ConsensusNotifyEngineDeactivated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Confirm that the notification was received. The validator message
/// correlation id is used to determine which notification this is an ack for.
public struct ConsensusNotifyAck {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Send a consensus message to a specific, connected peer
public struct ConsensusSendToRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Payload to send to peer
  ///
  /// NOTE: This payload will be wrapped up in a ConsensusPeerMessage struct,
  /// which includes computing its SHA-512 digest, inserting this engine's
  /// registration info, and the validator's public key, and signing everything
  /// with the validator's private key.
  public var content: Data = SwiftProtobuf.Internal.emptyData

  public var messageType: String = String()

  /// Peer that this message is destined for
  public var receiverID: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ConsensusSendToResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ConsensusSendToResponse.Status = .unset

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case badRequest // = 2
    case serviceError // = 3
    case notReady // = 4
    case unknownPeer // = 5
    case notActiveEngine // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .badRequest
      case 3: self = .serviceError
      case 4: self = .notReady
      case 5: self = .unknownPeer
      case 6: self = .notActiveEngine
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .badRequest: return 2
      case .serviceError: return 3
      case .notReady: return 4
      case .unknownPeer: return 5
      case .notActiveEngine: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension ConsensusSendToResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ConsensusSendToResponse.Status] = [
    .unset,
    .ok,
    .badRequest,
    .serviceError,
    .notReady,
    .unknownPeer,
    .notActiveEngine,
  ]
}

#endif  // swift(>=4.2)

/// Broadcast a consensus message to all peers
public struct ConsensusBroadcastRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Payload to broadcast peers
  ///
  /// NOTE: This payload will be wrapped up in a ConsensusPeerMessage struct,
  /// which includes computing its SHA-512 digest, inserting this engine's
  /// registration info, and the validator's public key, and signing everything
  /// with the validator's private key.
  public var content: Data = SwiftProtobuf.Internal.emptyData

  public var messageType: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ConsensusBroadcastResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ConsensusBroadcastResponse.Status = .unset

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case badRequest // = 2
    case serviceError // = 3
    case notReady // = 4
    case notActiveEngine // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .badRequest
      case 3: self = .serviceError
      case 4: self = .notReady
      case 5: self = .notActiveEngine
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .badRequest: return 2
      case .serviceError: return 3
      case .notReady: return 4
      case .notActiveEngine: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension ConsensusBroadcastResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ConsensusBroadcastResponse.Status] = [
    .unset,
    .ok,
    .badRequest,
    .serviceError,
    .notReady,
    .notActiveEngine,
  ]
}

#endif  // swift(>=4.2)

/// Initialize a new block built on the block with the given previous id and
/// begin adding batches to it. If no previous id is specified, the current
/// head will be used.
public struct ConsensusInitializeBlockRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var previousID: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ConsensusInitializeBlockResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ConsensusInitializeBlockResponse.Status = .unset

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case badRequest // = 2
    case serviceError // = 3
    case notReady // = 4
    case invalidState // = 5
    case unknownBlock // = 6
    case notActiveEngine // = 7
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .badRequest
      case 3: self = .serviceError
      case 4: self = .notReady
      case 5: self = .invalidState
      case 6: self = .unknownBlock
      case 7: self = .notActiveEngine
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .badRequest: return 2
      case .serviceError: return 3
      case .notReady: return 4
      case .invalidState: return 5
      case .unknownBlock: return 6
      case .notActiveEngine: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension ConsensusInitializeBlockResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ConsensusInitializeBlockResponse.Status] = [
    .unset,
    .ok,
    .badRequest,
    .serviceError,
    .notReady,
    .invalidState,
    .unknownBlock,
    .notActiveEngine,
  ]
}

#endif  // swift(>=4.2)

/// Stop adding batches to the current block and return a summary of its
/// contents.
public struct ConsensusSummarizeBlockRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ConsensusSummarizeBlockResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ConsensusSummarizeBlockResponse.Status = .unset

  /// A summary of the block contents
  public var summary: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case badRequest // = 2
    case serviceError // = 3
    case notReady // = 4
    case invalidState // = 5
    case blockNotReady // = 6
    case notActiveEngine // = 7
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .badRequest
      case 3: self = .serviceError
      case 4: self = .notReady
      case 5: self = .invalidState
      case 6: self = .blockNotReady
      case 7: self = .notActiveEngine
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .badRequest: return 2
      case .serviceError: return 3
      case .notReady: return 4
      case .invalidState: return 5
      case .blockNotReady: return 6
      case .notActiveEngine: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension ConsensusSummarizeBlockResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ConsensusSummarizeBlockResponse.Status] = [
    .unset,
    .ok,
    .badRequest,
    .serviceError,
    .notReady,
    .invalidState,
    .blockNotReady,
    .notActiveEngine,
  ]
}

#endif  // swift(>=4.2)

/// Insert the given consensus data into the block and sign it. If this call is
/// successful, the consensus engine will receive the block afterwards.
public struct ConsensusFinalizeBlockRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The consensus data to include in the finalized block
  public var data: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ConsensusFinalizeBlockResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ConsensusFinalizeBlockResponse.Status = .unset

  /// The block id of the newly created block
  public var blockID: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case badRequest // = 2
    case serviceError // = 3
    case notReady // = 4
    case invalidState // = 5
    case blockNotReady // = 6
    case notActiveEngine // = 7
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .badRequest
      case 3: self = .serviceError
      case 4: self = .notReady
      case 5: self = .invalidState
      case 6: self = .blockNotReady
      case 7: self = .notActiveEngine
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .badRequest: return 2
      case .serviceError: return 3
      case .notReady: return 4
      case .invalidState: return 5
      case .blockNotReady: return 6
      case .notActiveEngine: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension ConsensusFinalizeBlockResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ConsensusFinalizeBlockResponse.Status] = [
    .unset,
    .ok,
    .badRequest,
    .serviceError,
    .notReady,
    .invalidState,
    .blockNotReady,
    .notActiveEngine,
  ]
}

#endif  // swift(>=4.2)

/// Stop adding batches to the current block and abandon it.
public struct ConsensusCancelBlockRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ConsensusCancelBlockResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ConsensusCancelBlockResponse.Status = .unset

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case badRequest // = 2
    case serviceError // = 3
    case notReady // = 4
    case invalidState // = 5
    case notActiveEngine // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .badRequest
      case 3: self = .serviceError
      case 4: self = .notReady
      case 5: self = .invalidState
      case 6: self = .notActiveEngine
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .badRequest: return 2
      case .serviceError: return 3
      case .notReady: return 4
      case .invalidState: return 5
      case .notActiveEngine: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension ConsensusCancelBlockResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ConsensusCancelBlockResponse.Status] = [
    .unset,
    .ok,
    .badRequest,
    .serviceError,
    .notReady,
    .invalidState,
    .notActiveEngine,
  ]
}

#endif  // swift(>=4.2)

/// Request that, for each block block in order, the block is checked to
/// determine whether the block can be committed successfully or not. Blocks
/// may be checked in parallel. If a new request arrives, it overrides the
/// previous request allowing the engine to reprioritize the list of blocks to
/// check.
///
/// NOTE: OK does not mean the blocks will all commit successfully, only that
/// the directive was received successfully. The engine must listen for
/// notifications from the consuming component to learn if the blocks would
/// commit or not.
public struct ConsensusCheckBlocksRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockIds: [Data] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ConsensusCheckBlocksResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ConsensusCheckBlocksResponse.Status = .unset

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case badRequest // = 2
    case serviceError // = 3
    case notReady // = 4
    case unknownBlock // = 5
    case notActiveEngine // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .badRequest
      case 3: self = .serviceError
      case 4: self = .notReady
      case 5: self = .unknownBlock
      case 6: self = .notActiveEngine
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .badRequest: return 2
      case .serviceError: return 3
      case .notReady: return 4
      case .unknownBlock: return 5
      case .notActiveEngine: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension ConsensusCheckBlocksResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ConsensusCheckBlocksResponse.Status] = [
    .unset,
    .ok,
    .badRequest,
    .serviceError,
    .notReady,
    .unknownBlock,
    .notActiveEngine,
  ]
}

#endif  // swift(>=4.2)

/// Request that the block be committed. This request fails if the block has
/// not already been checked.
///
/// NOTE: OK does not mean the block has been committed, only that the directive
/// was received successfully. The engine must listen for notifications from the
/// consuming component to learn when the block commits.
public struct ConsensusCommitBlockRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockID: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ConsensusCommitBlockResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ConsensusCommitBlockResponse.Status = .unset

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case badRequest // = 2
    case serviceError // = 3
    case notReady // = 4
    case unknownBlock // = 5
    case notActiveEngine // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .badRequest
      case 3: self = .serviceError
      case 4: self = .notReady
      case 5: self = .unknownBlock
      case 6: self = .notActiveEngine
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .badRequest: return 2
      case .serviceError: return 3
      case .notReady: return 4
      case .unknownBlock: return 5
      case .notActiveEngine: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension ConsensusCommitBlockResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ConsensusCommitBlockResponse.Status] = [
    .unset,
    .ok,
    .badRequest,
    .serviceError,
    .notReady,
    .unknownBlock,
    .notActiveEngine,
  ]
}

#endif  // swift(>=4.2)

/// Inform the consuming component that this block is no longer being considered
/// and can be held or freed as needed.
public struct ConsensusIgnoreBlockRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockID: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ConsensusIgnoreBlockResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ConsensusIgnoreBlockResponse.Status = .unset

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case badRequest // = 2
    case serviceError // = 3
    case notReady // = 4
    case unknownBlock // = 5
    case notActiveEngine // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .badRequest
      case 3: self = .serviceError
      case 4: self = .notReady
      case 5: self = .unknownBlock
      case 6: self = .notActiveEngine
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .badRequest: return 2
      case .serviceError: return 3
      case .notReady: return 4
      case .unknownBlock: return 5
      case .notActiveEngine: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension ConsensusIgnoreBlockResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ConsensusIgnoreBlockResponse.Status] = [
    .unset,
    .ok,
    .badRequest,
    .serviceError,
    .notReady,
    .unknownBlock,
    .notActiveEngine,
  ]
}

#endif  // swift(>=4.2)

/// Fail this block and any of its descendants and purge them as needed.
public struct ConsensusFailBlockRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockID: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ConsensusFailBlockResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ConsensusFailBlockResponse.Status = .unset

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case badRequest // = 2
    case serviceError // = 3
    case notReady // = 4
    case unknownBlock // = 5
    case notActiveEngine // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .badRequest
      case 3: self = .serviceError
      case 4: self = .notReady
      case 5: self = .unknownBlock
      case 6: self = .notActiveEngine
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .badRequest: return 2
      case .serviceError: return 3
      case .notReady: return 4
      case .unknownBlock: return 5
      case .notActiveEngine: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension ConsensusFailBlockResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ConsensusFailBlockResponse.Status] = [
    .unset,
    .ok,
    .badRequest,
    .serviceError,
    .notReady,
    .unknownBlock,
    .notActiveEngine,
  ]
}

#endif  // swift(>=4.2)

/// Retrieve consensus-related information about blocks. If some blocks could
/// not be found, only the blocks that could be found will be returned.
public struct ConsensusBlocksGetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockIds: [Data] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ConsensusBlocksGetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ConsensusBlocksGetResponse.Status = .unset

  public var blocks: [ConsensusBlock] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case badRequest // = 2
    case serviceError // = 3
    case notReady // = 4
    case unknownBlock // = 5
    case notActiveEngine // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .badRequest
      case 3: self = .serviceError
      case 4: self = .notReady
      case 5: self = .unknownBlock
      case 6: self = .notActiveEngine
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .badRequest: return 2
      case .serviceError: return 3
      case .notReady: return 4
      case .unknownBlock: return 5
      case .notActiveEngine: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension ConsensusBlocksGetResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ConsensusBlocksGetResponse.Status] = [
    .unset,
    .ok,
    .badRequest,
    .serviceError,
    .notReady,
    .unknownBlock,
    .notActiveEngine,
  ]
}

#endif  // swift(>=4.2)

/// Retrieve consensus-related information about the chain head.
public struct ConsensusChainHeadGetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ConsensusChainHeadGetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ConsensusChainHeadGetResponse.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var block: ConsensusBlock {
    get {return _storage._block ?? ConsensusBlock()}
    set {_uniqueStorage()._block = newValue}
  }
  /// Returns true if `block` has been explicitly set.
  public var hasBlock: Bool {return _storage._block != nil}
  /// Clears the value of `block`. Subsequent reads from it will return its default value.
  public mutating func clearBlock() {_uniqueStorage()._block = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case badRequest // = 2
    case serviceError // = 3
    case notReady // = 4
    case noChainHead // = 5
    case notActiveEngine // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .badRequest
      case 3: self = .serviceError
      case 4: self = .notReady
      case 5: self = .noChainHead
      case 6: self = .notActiveEngine
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .badRequest: return 2
      case .serviceError: return 3
      case .notReady: return 4
      case .noChainHead: return 5
      case .notActiveEngine: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension ConsensusChainHeadGetResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ConsensusChainHeadGetResponse.Status] = [
    .unset,
    .ok,
    .badRequest,
    .serviceError,
    .notReady,
    .noChainHead,
    .notActiveEngine,
  ]
}

#endif  // swift(>=4.2)

/// Read the values of these settings from state as of the given block. If some
/// values settings keys cannot be found, the keys that were found will be
/// returned.
public struct ConsensusSettingsGetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockID: Data = SwiftProtobuf.Internal.emptyData

  public var keys: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ConsensusSettingsGetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ConsensusSettingsGetResponse.Status = .unset

  public var entries: [ConsensusSettingsEntry] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case badRequest // = 2
    case serviceError // = 3
    case notReady // = 4
    case unknownBlock // = 5
    case notActiveEngine // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .badRequest
      case 3: self = .serviceError
      case 4: self = .notReady
      case 5: self = .unknownBlock
      case 6: self = .notActiveEngine
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .badRequest: return 2
      case .serviceError: return 3
      case .notReady: return 4
      case .unknownBlock: return 5
      case .notActiveEngine: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension ConsensusSettingsGetResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ConsensusSettingsGetResponse.Status] = [
    .unset,
    .ok,
    .badRequest,
    .serviceError,
    .notReady,
    .unknownBlock,
    .notActiveEngine,
  ]
}

#endif  // swift(>=4.2)

/// Read the data at these addresses from state as of the given block. If some
/// addresses cannot be found, state at the addresses that were found will be
/// returned.
public struct ConsensusStateGetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockID: Data = SwiftProtobuf.Internal.emptyData

  public var addresses: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ConsensusStateGetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ConsensusStateGetResponse.Status = .unset

  public var entries: [ConsensusStateEntry] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case badRequest // = 2
    case serviceError // = 3
    case notReady // = 4
    case unknownBlock // = 5
    case notActiveEngine // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .badRequest
      case 3: self = .serviceError
      case 4: self = .notReady
      case 5: self = .unknownBlock
      case 6: self = .notActiveEngine
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .badRequest: return 2
      case .serviceError: return 3
      case .notReady: return 4
      case .unknownBlock: return 5
      case .notActiveEngine: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension ConsensusStateGetResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ConsensusStateGetResponse.Status] = [
    .unset,
    .ok,
    .badRequest,
    .serviceError,
    .notReady,
    .unknownBlock,
    .notActiveEngine,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ConsensusPeerMessageHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusPeerMessageHeader"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signer_id"),
    2: .standard(proto: "content_sha512"),
    5: .standard(proto: "message_type"),
    3: .same(proto: "name"),
    4: .same(proto: "version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.signerID)
      case 2: try decoder.decodeSingularBytesField(value: &self.contentSha512)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularStringField(value: &self.version)
      case 5: try decoder.decodeSingularStringField(value: &self.messageType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signerID.isEmpty {
      try visitor.visitSingularBytesField(value: self.signerID, fieldNumber: 1)
    }
    if !self.contentSha512.isEmpty {
      try visitor.visitSingularBytesField(value: self.contentSha512, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 4)
    }
    if !self.messageType.isEmpty {
      try visitor.visitSingularStringField(value: self.messageType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusPeerMessageHeader, rhs: ConsensusPeerMessageHeader) -> Bool {
    if lhs.signerID != rhs.signerID {return false}
    if lhs.contentSha512 != rhs.contentSha512 {return false}
    if lhs.messageType != rhs.messageType {return false}
    if lhs.name != rhs.name {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusPeerMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusPeerMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    3: .standard(proto: "header_signature"),
    2: .same(proto: "content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.header)
      case 2: try decoder.decodeSingularBytesField(value: &self.content)
      case 3: try decoder.decodeSingularBytesField(value: &self.headerSignature)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.header.isEmpty {
      try visitor.visitSingularBytesField(value: self.header, fieldNumber: 1)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 2)
    }
    if !self.headerSignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.headerSignature, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusPeerMessage, rhs: ConsensusPeerMessage) -> Bool {
    if lhs.header != rhs.header {return false}
    if lhs.headerSignature != rhs.headerSignature {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusBlock"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_id"),
    2: .standard(proto: "previous_id"),
    3: .standard(proto: "signer_id"),
    4: .standard(proto: "block_num"),
    5: .same(proto: "payload"),
    6: .same(proto: "summary"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.blockID)
      case 2: try decoder.decodeSingularBytesField(value: &self.previousID)
      case 3: try decoder.decodeSingularBytesField(value: &self.signerID)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.blockNum)
      case 5: try decoder.decodeSingularBytesField(value: &self.payload)
      case 6: try decoder.decodeSingularBytesField(value: &self.summary)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockID, fieldNumber: 1)
    }
    if !self.previousID.isEmpty {
      try visitor.visitSingularBytesField(value: self.previousID, fieldNumber: 2)
    }
    if !self.signerID.isEmpty {
      try visitor.visitSingularBytesField(value: self.signerID, fieldNumber: 3)
    }
    if self.blockNum != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockNum, fieldNumber: 4)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 5)
    }
    if !self.summary.isEmpty {
      try visitor.visitSingularBytesField(value: self.summary, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusBlock, rhs: ConsensusBlock) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs.previousID != rhs.previousID {return false}
    if lhs.signerID != rhs.signerID {return false}
    if lhs.blockNum != rhs.blockNum {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.summary != rhs.summary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusPeerInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusPeerInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "peer_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.peerID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.peerID.isEmpty {
      try visitor.visitSingularBytesField(value: self.peerID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusPeerInfo, rhs: ConsensusPeerInfo) -> Bool {
    if lhs.peerID != rhs.peerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusSettingsEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusSettingsEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusSettingsEntry, rhs: ConsensusSettingsEntry) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusStateEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusStateEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.address)
      case 2: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusStateEntry, rhs: ConsensusStateEntry) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusRegisterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusRegisterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "version"),
    3: .standard(proto: "additional_protocols"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.version)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.additionalProtocols)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if !self.additionalProtocols.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalProtocols, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusRegisterRequest, rhs: ConsensusRegisterRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.version != rhs.version {return false}
    if lhs.additionalProtocols != rhs.additionalProtocols {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusRegisterRequest.ProtocolMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = ConsensusRegisterRequest.protoMessageName + ".Protocol"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.version)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusRegisterRequest.ProtocolMessage, rhs: ConsensusRegisterRequest.ProtocolMessage) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusRegisterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusRegisterResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "chain_head"),
    3: .same(proto: "peers"),
    4: .standard(proto: "local_peer_info"),
  ]

  fileprivate class _StorageClass {
    var _status: ConsensusRegisterResponse.Status = .unset
    var _chainHead: ConsensusBlock? = nil
    var _peers: [ConsensusPeerInfo] = []
    var _localPeerInfo: ConsensusPeerInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _chainHead = source._chainHead
      _peers = source._peers
      _localPeerInfo = source._localPeerInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._chainHead)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._peers)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._localPeerInfo)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != .unset {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 1)
      }
      if let v = _storage._chainHead {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._peers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._peers, fieldNumber: 3)
      }
      if let v = _storage._localPeerInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusRegisterResponse, rhs: ConsensusRegisterResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._chainHead != rhs_storage._chainHead {return false}
        if _storage._peers != rhs_storage._peers {return false}
        if _storage._localPeerInfo != rhs_storage._localPeerInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusRegisterResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "SERVICE_ERROR"),
    4: .same(proto: "NOT_READY"),
  ]
}

extension ConsensusNotifyPeerConnected: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusNotifyPeerConnected"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "peer_info"),
  ]

  fileprivate class _StorageClass {
    var _peerInfo: ConsensusPeerInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _peerInfo = source._peerInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._peerInfo)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._peerInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusNotifyPeerConnected, rhs: ConsensusNotifyPeerConnected) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._peerInfo != rhs_storage._peerInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusNotifyPeerDisconnected: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusNotifyPeerDisconnected"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "peer_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.peerID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.peerID.isEmpty {
      try visitor.visitSingularBytesField(value: self.peerID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusNotifyPeerDisconnected, rhs: ConsensusNotifyPeerDisconnected) -> Bool {
    if lhs.peerID != rhs.peerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusNotifyPeerMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusNotifyPeerMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .standard(proto: "sender_id"),
  ]

  fileprivate class _StorageClass {
    var _message: ConsensusPeerMessage? = nil
    var _senderID: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _message = source._message
      _senderID = source._senderID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._message)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._senderID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._senderID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._senderID, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusNotifyPeerMessage, rhs: ConsensusNotifyPeerMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._message != rhs_storage._message {return false}
        if _storage._senderID != rhs_storage._senderID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusNotifyBlockNew: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusNotifyBlockNew"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "block"),
  ]

  fileprivate class _StorageClass {
    var _block: ConsensusBlock? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _block = source._block
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._block)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._block {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusNotifyBlockNew, rhs: ConsensusNotifyBlockNew) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._block != rhs_storage._block {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusNotifyBlockValid: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusNotifyBlockValid"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.blockID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusNotifyBlockValid, rhs: ConsensusNotifyBlockValid) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusNotifyBlockInvalid: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusNotifyBlockInvalid"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.blockID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusNotifyBlockInvalid, rhs: ConsensusNotifyBlockInvalid) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusNotifyBlockCommit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusNotifyBlockCommit"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.blockID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusNotifyBlockCommit, rhs: ConsensusNotifyBlockCommit) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusNotifyEngineActivated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusNotifyEngineActivated"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_head"),
    2: .same(proto: "peers"),
    3: .standard(proto: "local_peer_info"),
  ]

  fileprivate class _StorageClass {
    var _chainHead: ConsensusBlock? = nil
    var _peers: [ConsensusPeerInfo] = []
    var _localPeerInfo: ConsensusPeerInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chainHead = source._chainHead
      _peers = source._peers
      _localPeerInfo = source._localPeerInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._chainHead)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._peers)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._localPeerInfo)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._chainHead {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._peers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._peers, fieldNumber: 2)
      }
      if let v = _storage._localPeerInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusNotifyEngineActivated, rhs: ConsensusNotifyEngineActivated) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chainHead != rhs_storage._chainHead {return false}
        if _storage._peers != rhs_storage._peers {return false}
        if _storage._localPeerInfo != rhs_storage._localPeerInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusNotifyEngineDeactivated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusNotifyEngineDeactivated"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusNotifyEngineDeactivated, rhs: ConsensusNotifyEngineDeactivated) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusNotifyAck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusNotifyAck"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusNotifyAck, rhs: ConsensusNotifyAck) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusSendToRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusSendToRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
    3: .standard(proto: "message_type"),
    2: .standard(proto: "receiver_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.content)
      case 2: try decoder.decodeSingularBytesField(value: &self.receiverID)
      case 3: try decoder.decodeSingularStringField(value: &self.messageType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 1)
    }
    if !self.receiverID.isEmpty {
      try visitor.visitSingularBytesField(value: self.receiverID, fieldNumber: 2)
    }
    if !self.messageType.isEmpty {
      try visitor.visitSingularStringField(value: self.messageType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusSendToRequest, rhs: ConsensusSendToRequest) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.messageType != rhs.messageType {return false}
    if lhs.receiverID != rhs.receiverID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusSendToResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusSendToResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusSendToResponse, rhs: ConsensusSendToResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusSendToResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "SERVICE_ERROR"),
    4: .same(proto: "NOT_READY"),
    5: .same(proto: "UNKNOWN_PEER"),
    6: .same(proto: "NOT_ACTIVE_ENGINE"),
  ]
}

extension ConsensusBroadcastRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusBroadcastRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
    2: .standard(proto: "message_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.content)
      case 2: try decoder.decodeSingularStringField(value: &self.messageType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 1)
    }
    if !self.messageType.isEmpty {
      try visitor.visitSingularStringField(value: self.messageType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusBroadcastRequest, rhs: ConsensusBroadcastRequest) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.messageType != rhs.messageType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusBroadcastResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusBroadcastResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusBroadcastResponse, rhs: ConsensusBroadcastResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusBroadcastResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "SERVICE_ERROR"),
    4: .same(proto: "NOT_READY"),
    5: .same(proto: "NOT_ACTIVE_ENGINE"),
  ]
}

extension ConsensusInitializeBlockRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusInitializeBlockRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "previous_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.previousID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.previousID.isEmpty {
      try visitor.visitSingularBytesField(value: self.previousID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusInitializeBlockRequest, rhs: ConsensusInitializeBlockRequest) -> Bool {
    if lhs.previousID != rhs.previousID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusInitializeBlockResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusInitializeBlockResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusInitializeBlockResponse, rhs: ConsensusInitializeBlockResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusInitializeBlockResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "SERVICE_ERROR"),
    4: .same(proto: "NOT_READY"),
    5: .same(proto: "INVALID_STATE"),
    6: .same(proto: "UNKNOWN_BLOCK"),
    7: .same(proto: "NOT_ACTIVE_ENGINE"),
  ]
}

extension ConsensusSummarizeBlockRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusSummarizeBlockRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusSummarizeBlockRequest, rhs: ConsensusSummarizeBlockRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusSummarizeBlockResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusSummarizeBlockResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "summary"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      case 2: try decoder.decodeSingularBytesField(value: &self.summary)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if !self.summary.isEmpty {
      try visitor.visitSingularBytesField(value: self.summary, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusSummarizeBlockResponse, rhs: ConsensusSummarizeBlockResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.summary != rhs.summary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusSummarizeBlockResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "SERVICE_ERROR"),
    4: .same(proto: "NOT_READY"),
    5: .same(proto: "INVALID_STATE"),
    6: .same(proto: "BLOCK_NOT_READY"),
    7: .same(proto: "NOT_ACTIVE_ENGINE"),
  ]
}

extension ConsensusFinalizeBlockRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusFinalizeBlockRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusFinalizeBlockRequest, rhs: ConsensusFinalizeBlockRequest) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusFinalizeBlockResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusFinalizeBlockResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "block_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      case 2: try decoder.decodeSingularBytesField(value: &self.blockID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusFinalizeBlockResponse, rhs: ConsensusFinalizeBlockResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusFinalizeBlockResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "SERVICE_ERROR"),
    4: .same(proto: "NOT_READY"),
    5: .same(proto: "INVALID_STATE"),
    6: .same(proto: "BLOCK_NOT_READY"),
    7: .same(proto: "NOT_ACTIVE_ENGINE"),
  ]
}

extension ConsensusCancelBlockRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusCancelBlockRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusCancelBlockRequest, rhs: ConsensusCancelBlockRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusCancelBlockResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusCancelBlockResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusCancelBlockResponse, rhs: ConsensusCancelBlockResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusCancelBlockResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "SERVICE_ERROR"),
    4: .same(proto: "NOT_READY"),
    5: .same(proto: "INVALID_STATE"),
    6: .same(proto: "NOT_ACTIVE_ENGINE"),
  ]
}

extension ConsensusCheckBlocksRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusCheckBlocksRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedBytesField(value: &self.blockIds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.blockIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusCheckBlocksRequest, rhs: ConsensusCheckBlocksRequest) -> Bool {
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusCheckBlocksResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusCheckBlocksResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusCheckBlocksResponse, rhs: ConsensusCheckBlocksResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusCheckBlocksResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "SERVICE_ERROR"),
    4: .same(proto: "NOT_READY"),
    5: .same(proto: "UNKNOWN_BLOCK"),
    6: .same(proto: "NOT_ACTIVE_ENGINE"),
  ]
}

extension ConsensusCommitBlockRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusCommitBlockRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.blockID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusCommitBlockRequest, rhs: ConsensusCommitBlockRequest) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusCommitBlockResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusCommitBlockResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusCommitBlockResponse, rhs: ConsensusCommitBlockResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusCommitBlockResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "SERVICE_ERROR"),
    4: .same(proto: "NOT_READY"),
    5: .same(proto: "UNKNOWN_BLOCK"),
    6: .same(proto: "NOT_ACTIVE_ENGINE"),
  ]
}

extension ConsensusIgnoreBlockRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusIgnoreBlockRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.blockID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusIgnoreBlockRequest, rhs: ConsensusIgnoreBlockRequest) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusIgnoreBlockResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusIgnoreBlockResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusIgnoreBlockResponse, rhs: ConsensusIgnoreBlockResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusIgnoreBlockResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "SERVICE_ERROR"),
    4: .same(proto: "NOT_READY"),
    5: .same(proto: "UNKNOWN_BLOCK"),
    6: .same(proto: "NOT_ACTIVE_ENGINE"),
  ]
}

extension ConsensusFailBlockRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusFailBlockRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.blockID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusFailBlockRequest, rhs: ConsensusFailBlockRequest) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusFailBlockResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusFailBlockResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusFailBlockResponse, rhs: ConsensusFailBlockResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusFailBlockResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "SERVICE_ERROR"),
    4: .same(proto: "NOT_READY"),
    5: .same(proto: "UNKNOWN_BLOCK"),
    6: .same(proto: "NOT_ACTIVE_ENGINE"),
  ]
}

extension ConsensusBlocksGetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusBlocksGetRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedBytesField(value: &self.blockIds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.blockIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusBlocksGetRequest, rhs: ConsensusBlocksGetRequest) -> Bool {
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusBlocksGetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusBlocksGetResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "blocks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.blocks)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if !self.blocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blocks, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusBlocksGetResponse, rhs: ConsensusBlocksGetResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.blocks != rhs.blocks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusBlocksGetResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "SERVICE_ERROR"),
    4: .same(proto: "NOT_READY"),
    5: .same(proto: "UNKNOWN_BLOCK"),
    6: .same(proto: "NOT_ACTIVE_ENGINE"),
  ]
}

extension ConsensusChainHeadGetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusChainHeadGetRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusChainHeadGetRequest, rhs: ConsensusChainHeadGetRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusChainHeadGetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusChainHeadGetResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "block"),
  ]

  fileprivate class _StorageClass {
    var _status: ConsensusChainHeadGetResponse.Status = .unset
    var _block: ConsensusBlock? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _block = source._block
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._block)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != .unset {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 1)
      }
      if let v = _storage._block {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusChainHeadGetResponse, rhs: ConsensusChainHeadGetResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._block != rhs_storage._block {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusChainHeadGetResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "SERVICE_ERROR"),
    4: .same(proto: "NOT_READY"),
    5: .same(proto: "NO_CHAIN_HEAD"),
    6: .same(proto: "NOT_ACTIVE_ENGINE"),
  ]
}

extension ConsensusSettingsGetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusSettingsGetRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_id"),
    2: .same(proto: "keys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.blockID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.keys)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockID, fieldNumber: 1)
    }
    if !self.keys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.keys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusSettingsGetRequest, rhs: ConsensusSettingsGetRequest) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs.keys != rhs.keys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusSettingsGetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusSettingsGetResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.entries)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusSettingsGetResponse, rhs: ConsensusSettingsGetResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusSettingsGetResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "SERVICE_ERROR"),
    4: .same(proto: "NOT_READY"),
    5: .same(proto: "UNKNOWN_BLOCK"),
    6: .same(proto: "NOT_ACTIVE_ENGINE"),
  ]
}

extension ConsensusStateGetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusStateGetRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_id"),
    2: .same(proto: "addresses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.blockID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.addresses)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockID, fieldNumber: 1)
    }
    if !self.addresses.isEmpty {
      try visitor.visitRepeatedStringField(value: self.addresses, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusStateGetRequest, rhs: ConsensusStateGetRequest) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs.addresses != rhs.addresses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusStateGetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ConsensusStateGetResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.entries)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ConsensusStateGetResponse, rhs: ConsensusStateGetResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ConsensusStateGetResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "SERVICE_ERROR"),
    4: .same(proto: "NOT_READY"),
    5: .same(proto: "UNKNOWN_BLOCK"),
    6: .same(proto: "NOT_ACTIVE_ENGINE"),
  ]
}
