// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: block_info.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2017 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct BlockInfoConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var latestBlock: UInt64 = 0

  public var oldestBlock: UInt64 = 0

  public var targetCount: UInt64 = 0

  public var syncTolerance: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct BlockInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Block number in the chain
  public var blockNum: UInt64 = 0

  /// The header_signature of the previous block that was added to the chain.
  public var previousBlockID: String = String()

  /// Public key for the component internal to the validator that
  /// signed the BlockHeader
  public var signerPublicKey: String = String()

  /// The signature derived from signing the header
  public var headerSignature: String = String()

  /// Approximately when this block was committed, as a Unix UTC timestamp
  public var timestamp: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct BlockInfoTxn {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The new block to add to state
  public var block: BlockInfo {
    get {return _storage._block ?? BlockInfo()}
    set {_uniqueStorage()._block = newValue}
  }
  /// Returns true if `block` has been explicitly set.
  public var hasBlock: Bool {return _storage._block != nil}
  /// Clears the value of `block`. Subsequent reads from it will return its default value.
  public mutating func clearBlock() {_uniqueStorage()._block = nil}

  /// If this is set, the new target number of blocks to store in state
  public var targetCount: UInt64 {
    get {return _storage._targetCount}
    set {_uniqueStorage()._targetCount = newValue}
  }

  /// If set, the new network time synchronization tolerance.
  public var syncTolerance: UInt64 {
    get {return _storage._syncTolerance}
    set {_uniqueStorage()._syncTolerance = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension BlockInfoConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "BlockInfoConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "latest_block"),
    2: .standard(proto: "oldest_block"),
    3: .standard(proto: "target_count"),
    4: .standard(proto: "sync_tolerance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.latestBlock)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.oldestBlock)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.targetCount)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.syncTolerance)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latestBlock != 0 {
      try visitor.visitSingularUInt64Field(value: self.latestBlock, fieldNumber: 1)
    }
    if self.oldestBlock != 0 {
      try visitor.visitSingularUInt64Field(value: self.oldestBlock, fieldNumber: 2)
    }
    if self.targetCount != 0 {
      try visitor.visitSingularUInt64Field(value: self.targetCount, fieldNumber: 3)
    }
    if self.syncTolerance != 0 {
      try visitor.visitSingularUInt64Field(value: self.syncTolerance, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: BlockInfoConfig, rhs: BlockInfoConfig) -> Bool {
    if lhs.latestBlock != rhs.latestBlock {return false}
    if lhs.oldestBlock != rhs.oldestBlock {return false}
    if lhs.targetCount != rhs.targetCount {return false}
    if lhs.syncTolerance != rhs.syncTolerance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension BlockInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "BlockInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_num"),
    2: .standard(proto: "previous_block_id"),
    3: .standard(proto: "signer_public_key"),
    4: .standard(proto: "header_signature"),
    5: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.blockNum)
      case 2: try decoder.decodeSingularStringField(value: &self.previousBlockID)
      case 3: try decoder.decodeSingularStringField(value: &self.signerPublicKey)
      case 4: try decoder.decodeSingularStringField(value: &self.headerSignature)
      case 5: try decoder.decodeSingularUInt64Field(value: &self.timestamp)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockNum != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockNum, fieldNumber: 1)
    }
    if !self.previousBlockID.isEmpty {
      try visitor.visitSingularStringField(value: self.previousBlockID, fieldNumber: 2)
    }
    if !self.signerPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.signerPublicKey, fieldNumber: 3)
    }
    if !self.headerSignature.isEmpty {
      try visitor.visitSingularStringField(value: self.headerSignature, fieldNumber: 4)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: BlockInfo, rhs: BlockInfo) -> Bool {
    if lhs.blockNum != rhs.blockNum {return false}
    if lhs.previousBlockID != rhs.previousBlockID {return false}
    if lhs.signerPublicKey != rhs.signerPublicKey {return false}
    if lhs.headerSignature != rhs.headerSignature {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension BlockInfoTxn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "BlockInfoTxn"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "block"),
    2: .standard(proto: "target_count"),
    3: .standard(proto: "sync_tolerance"),
  ]

  fileprivate class _StorageClass {
    var _block: BlockInfo? = nil
    var _targetCount: UInt64 = 0
    var _syncTolerance: UInt64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _block = source._block
      _targetCount = source._targetCount
      _syncTolerance = source._syncTolerance
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._block)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._targetCount)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._syncTolerance)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._block {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._targetCount != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._targetCount, fieldNumber: 2)
      }
      if _storage._syncTolerance != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._syncTolerance, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: BlockInfoTxn, rhs: BlockInfoTxn) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._block != rhs_storage._block {return false}
        if _storage._targetCount != rhs_storage._targetCount {return false}
        if _storage._syncTolerance != rhs_storage._syncTolerance {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
