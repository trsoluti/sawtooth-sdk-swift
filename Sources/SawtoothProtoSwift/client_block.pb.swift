// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: client_block.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2017 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A request to return a list of blocks from the validator. May include the id
/// of a particular block to be the `head` of the chain being requested. In that
/// case the list will include that block (if found), and all blocks previous
/// to it on the chain. Can be filtered using specific `block_ids`.
public struct ClientBlockListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var headID: String {
    get {return _storage._headID}
    set {_uniqueStorage()._headID = newValue}
  }

  public var blockIds: [String] {
    get {return _storage._blockIds}
    set {_uniqueStorage()._blockIds = newValue}
  }

  public var paging: ClientPagingControls {
    get {return _storage._paging ?? ClientPagingControls()}
    set {_uniqueStorage()._paging = newValue}
  }
  /// Returns true if `paging` has been explicitly set.
  public var hasPaging: Bool {return _storage._paging != nil}
  /// Clears the value of `paging`. Subsequent reads from it will return its default value.
  public mutating func clearPaging() {_uniqueStorage()._paging = nil}

  public var sorting: [ClientSortControls] {
    get {return _storage._sorting}
    set {_uniqueStorage()._sorting = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// A response that lists a chain of blocks with the newest at the beginning,
/// and the oldest (genesis) block at the end.
///
/// Statuses:
///   * OK - everything worked as expected
///   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
///   * NOT_READY - the validator does not yet have a genesis block
///   * NO_ROOT - the head block specified was not found
///   * NO_RESOURCE - no blocks were found with the parameters specified
///   * INVALID_PAGING - the paging controls were malformed or out of range
///   * INVALID_SORT - the sorting controls were malformed or invalid
public struct ClientBlockListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ClientBlockListResponse.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var blocks: [Block] {
    get {return _storage._blocks}
    set {_uniqueStorage()._blocks = newValue}
  }

  public var headID: String {
    get {return _storage._headID}
    set {_uniqueStorage()._headID = newValue}
  }

  public var paging: ClientPagingResponse {
    get {return _storage._paging ?? ClientPagingResponse()}
    set {_uniqueStorage()._paging = newValue}
  }
  /// Returns true if `paging` has been explicitly set.
  public var hasPaging: Bool {return _storage._paging != nil}
  /// Clears the value of `paging`. Subsequent reads from it will return its default value.
  public mutating func clearPaging() {_uniqueStorage()._paging = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case internalError // = 2
    case notReady // = 3
    case noRoot // = 4
    case noResource // = 5
    case invalidPaging // = 6
    case invalidSort // = 7
    case invalidID // = 8
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .internalError
      case 3: self = .notReady
      case 4: self = .noRoot
      case 5: self = .noResource
      case 6: self = .invalidPaging
      case 7: self = .invalidSort
      case 8: self = .invalidID
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .internalError: return 2
      case .notReady: return 3
      case .noRoot: return 4
      case .noResource: return 5
      case .invalidPaging: return 6
      case .invalidSort: return 7
      case .invalidID: return 8
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension ClientBlockListResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ClientBlockListResponse.Status] = [
    .unset,
    .ok,
    .internalError,
    .notReady,
    .noRoot,
    .noResource,
    .invalidPaging,
    .invalidSort,
    .invalidID,
  ]
}

#endif  // swift(>=4.2)

/// A request to return a specific block from the validator. The block must be
/// specified by its unique id, in this case the block's header signature
public struct ClientBlockGetByIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to return a specific block from the validator. The block must be
/// specified by its block number
public struct ClientBlockGetByNumRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockNum: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to return a specific block from the validator. The block
/// containing the given transaction is returned. If no block on the current
/// chain contains the transaction, NO_RESOURCE is returned.
public struct ClientBlockGetByTransactionIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var transactionID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to return a specific block from the validator. The block
/// containing the given batch is returned. If no block on the current chain
/// contains the batch, NO_RESOURCE is returned.
public struct ClientBlockGetByBatchIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var batchID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A response that returns the block specified by a ClientBlockGetByIdRequest
/// or  ClientBlockGetByNumRequest.
///
/// Statuses:
///   * OK - everything worked as expected
///   * INTERNAL_ERROR - general error, such as protobuf failing to deserialize
///   * NO_RESOURCE - no block with the specified id exists
public struct ClientBlockGetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: ClientBlockGetResponse.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var block: Block {
    get {return _storage._block ?? Block()}
    set {_uniqueStorage()._block = newValue}
  }
  /// Returns true if `block` has been explicitly set.
  public var hasBlock: Bool {return _storage._block != nil}
  /// Clears the value of `block`. Subsequent reads from it will return its default value.
  public mutating func clearBlock() {_uniqueStorage()._block = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case ok // = 1
    case internalError // = 2
    case noResource // = 5
    case invalidID // = 8
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .ok
      case 2: self = .internalError
      case 5: self = .noResource
      case 8: self = .invalidID
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .ok: return 1
      case .internalError: return 2
      case .noResource: return 5
      case .invalidID: return 8
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension ClientBlockGetResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ClientBlockGetResponse.Status] = [
    .unset,
    .ok,
    .internalError,
    .noResource,
    .invalidID,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ClientBlockListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ClientBlockListRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "head_id"),
    2: .standard(proto: "block_ids"),
    3: .same(proto: "paging"),
    4: .same(proto: "sorting"),
  ]

  fileprivate class _StorageClass {
    var _headID: String = String()
    var _blockIds: [String] = []
    var _paging: ClientPagingControls? = nil
    var _sorting: [ClientSortControls] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _headID = source._headID
      _blockIds = source._blockIds
      _paging = source._paging
      _sorting = source._sorting
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._headID)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._blockIds)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._paging)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._sorting)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._headID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._headID, fieldNumber: 1)
      }
      if !_storage._blockIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._blockIds, fieldNumber: 2)
      }
      if let v = _storage._paging {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._sorting.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._sorting, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ClientBlockListRequest, rhs: ClientBlockListRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._headID != rhs_storage._headID {return false}
        if _storage._blockIds != rhs_storage._blockIds {return false}
        if _storage._paging != rhs_storage._paging {return false}
        if _storage._sorting != rhs_storage._sorting {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ClientBlockListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ClientBlockListResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "blocks"),
    3: .standard(proto: "head_id"),
    4: .same(proto: "paging"),
  ]

  fileprivate class _StorageClass {
    var _status: ClientBlockListResponse.Status = .unset
    var _blocks: [Block] = []
    var _headID: String = String()
    var _paging: ClientPagingResponse? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _blocks = source._blocks
      _headID = source._headID
      _paging = source._paging
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._blocks)
        case 3: try decoder.decodeSingularStringField(value: &_storage._headID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._paging)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != .unset {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 1)
      }
      if !_storage._blocks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._blocks, fieldNumber: 2)
      }
      if !_storage._headID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._headID, fieldNumber: 3)
      }
      if let v = _storage._paging {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ClientBlockListResponse, rhs: ClientBlockListResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._blocks != rhs_storage._blocks {return false}
        if _storage._headID != rhs_storage._headID {return false}
        if _storage._paging != rhs_storage._paging {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ClientBlockListResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "INTERNAL_ERROR"),
    3: .same(proto: "NOT_READY"),
    4: .same(proto: "NO_ROOT"),
    5: .same(proto: "NO_RESOURCE"),
    6: .same(proto: "INVALID_PAGING"),
    7: .same(proto: "INVALID_SORT"),
    8: .same(proto: "INVALID_ID"),
  ]
}

extension ClientBlockGetByIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ClientBlockGetByIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.blockID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ClientBlockGetByIdRequest, rhs: ClientBlockGetByIdRequest) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ClientBlockGetByNumRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ClientBlockGetByNumRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_num"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.blockNum)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockNum != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockNum, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ClientBlockGetByNumRequest, rhs: ClientBlockGetByNumRequest) -> Bool {
    if lhs.blockNum != rhs.blockNum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ClientBlockGetByTransactionIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ClientBlockGetByTransactionIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transaction_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.transactionID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transactionID.isEmpty {
      try visitor.visitSingularStringField(value: self.transactionID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ClientBlockGetByTransactionIdRequest, rhs: ClientBlockGetByTransactionIdRequest) -> Bool {
    if lhs.transactionID != rhs.transactionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ClientBlockGetByBatchIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ClientBlockGetByBatchIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "batch_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.batchID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.batchID.isEmpty {
      try visitor.visitSingularStringField(value: self.batchID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ClientBlockGetByBatchIdRequest, rhs: ClientBlockGetByBatchIdRequest) -> Bool {
    if lhs.batchID != rhs.batchID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ClientBlockGetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ClientBlockGetResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "block"),
  ]

  fileprivate class _StorageClass {
    var _status: ClientBlockGetResponse.Status = .unset
    var _block: Block? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _block = source._block
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._block)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != .unset {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 1)
      }
      if let v = _storage._block {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ClientBlockGetResponse, rhs: ClientBlockGetResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._block != rhs_storage._block {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ClientBlockGetResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSET"),
    1: .same(proto: "OK"),
    2: .same(proto: "INTERNAL_ERROR"),
    5: .same(proto: "NO_RESOURCE"),
    8: .same(proto: "INVALID_ID"),
  ]
}
