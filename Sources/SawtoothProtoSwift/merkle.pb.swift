// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: merkle.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

/// Copyright 2018 Intel Corporation
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
/// -----------------------------------------------------------------------------

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// An Entry in the change log for a given state root.
public struct ChangeLogEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A root hash of a merkle trie this tree was based off.
  public var parent: Data = SwiftProtobuf.Internal.emptyData

  /// The hashes that were added for this root. These may be deleted during
  /// pruning, if this root is being abandoned.
  public var additions: [Data] = []

  /// The list of successors.
  public var successors: [ChangeLogEntry.Successor] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// A state root that succeed this root.
  public struct Successor {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// A root hash of a merkle trie based of off this root.
    public var successor: Data = SwiftProtobuf.Internal.emptyData

    /// The keys (i.e. hashes) that were replaced (i.e. deleted) by this
    /// successor.  These may be deleted during pruning.
    public var deletions: [Data] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ChangeLogEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ChangeLogEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "additions"),
    3: .same(proto: "successors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.parent)
      case 2: try decoder.decodeRepeatedBytesField(value: &self.additions)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.successors)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularBytesField(value: self.parent, fieldNumber: 1)
    }
    if !self.additions.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.additions, fieldNumber: 2)
    }
    if !self.successors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.successors, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ChangeLogEntry, rhs: ChangeLogEntry) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.additions != rhs.additions {return false}
    if lhs.successors != rhs.successors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ChangeLogEntry.Successor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = ChangeLogEntry.protoMessageName + ".Successor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "successor"),
    2: .same(proto: "deletions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.successor)
      case 2: try decoder.decodeRepeatedBytesField(value: &self.deletions)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.successor.isEmpty {
      try visitor.visitSingularBytesField(value: self.successor, fieldNumber: 1)
    }
    if !self.deletions.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.deletions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ChangeLogEntry.Successor, rhs: ChangeLogEntry.Successor) -> Bool {
    if lhs.successor != rhs.successor {return false}
    if lhs.deletions != rhs.deletions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
